#!/usr/bin/env python3

import datetime
import http.client
import urllib.parse
import base64
import json
import ssl
import sys
import dateutil.parser
import argparse

DASIT_HOST="localhost:8443"

def make_read_req(endpoint):
    ssl_ctx = ssl._create_unverified_context()
    cli = http.client.HTTPSConnection(DASIT_HOST, context=ssl_ctx)

    cli.request('GET', urllib.parse.quote(endpoint))
    resp = cli.getresponse()

    if resp.status != 200:
        pass

    payload = json.loads(resp.read())
    cli.close()
    return payload

def make_write_req(endpoint, payload):
    headers = {"Content-Type": "application/json"}
    ssl_ctx = ssl._create_unverified_context()
    cli = http.client.HTTPSConnection(DASIT_HOST, context=ssl_ctx)

    cli.request('POST', urllib.parse.quote(endpoint), headers=headers, body=json.dumps(payload))
    resp = cli.getresponse()
    payload = resp.read()

    if resp.status != 200:
        raise ValueError(payload.decode())

    cli.close()
    return json.loads(payload)

def create_dataset(dataset, group):
    req = { "datasetName": dataset, "ownerGroupName": group }
    try:
        ds = make_write_req("/dataset_registration/create", req)
        print(f"'{ds['group']['name']}' : '{ds['name']}' : {ds['status']}")

    except Exception as e:
        err = json.loads(str(e))
        print(f"status: {err['status']}", file=sys.stderr)
        print(f"error: {err['error']}", file=sys.stderr)
        print(f"message:\n===\n{err['message']}\n===", file=sys.stderr)

def list_windows(dataset):
    for dsw in make_read_req(f'/dataset_publish/list_windows/{dataset}'):
        print(f"'{dsw['datasetName']}': {dsw['windowStartDateTime']} -> {dsw['windowEndDateTime']}")

def list_datasets():
    for ds in make_read_req("/dataset_registration/list"):
        print(f"'{ds['group']['name']}' : '{ds['name']}' : {ds['status']}")

def list_groups():
    for g in make_read_req("/groups/list"):
        print(f"'{g['name']}' : {g['status']}")

def parse_arguments():
    parser = argparse.ArgumentParser(
        description=("A script for interacting with DASIT")
    )

    parser.add_argument(
        "-c",
        "--cmd",
        dest="command",
        type=str,
        required=True,
        help="The command to be executed"
    )

    parser.add_argument(
        "-d",
        "--dataset",
        dest="dataset",
        type=str,
        help="The dataset name for the command"
    )

    parser.add_argument(
        "-g",
        "--group",
        dest="group",
        type=str,
        help="The group name for the command"
    )

    args = parser.parse_args()
    args_dict = vars(args)
    return args_dict

## Main

CMDS = {
    "list_datasets": list_datasets,
    "list_groups": list_groups,
    "list_windows": list_windows,

    "create_dataset": create_dataset,
}

args = parse_arguments()

if args['command'] not in CMDS.keys():
    print(f"Unknown command '{args['command']}'", file=sys.stderr)
    sys.exit(1)

elif args['command'] == 'create_dataset':
    if not args.get('dataset'):
        print("The dataset (-d) must be provided", file=sys.stderr)
        sys.exit(1)

    if not args.get('group'):
        print("The group (-g) must be provided", file=sys.stderr)
        sys.exit(1)

    CMDS[args['command']](args['dataset'], args['group'])

elif args['command'] == 'list_windows':
    if not args.get('dataset'):
        print("The dataset (-d) must be provided", file=sys.stderr)
        sys.exit(1)

    CMDS[args['command']](args['dataset'])

else:
    CMDS[args['command']]()

sys.exit(0)
